/*********************************************************************
**MathBall** 2016 by Dominic Buchstaller - dbuchstaller@web.de
Hacking some sense into the Little Tikes Goofy Giggles ...

Simple mathematics game 

Codes stolen from:
https://mpswp.wordpress.com/2015/08/30/play-music-out-of-an-arduino-uno-using-a-piezo-speaker/
http://playground.arduino.cc/Code/PCMAudio

*********************************************************************/
#include <EEPROM.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_PCD8544.h>
#include <stdint.h>
#include <avr/interrupt.h>
#include <avr/io.h>
#include <avr/pgmspace.h>


#define SAMPLE_RATE 8000


enum gametype {ADD,SUB,MUL};
enum player {BOTH,P1,P2};

gametype this_gametype;
player this_player;
// Software SPI (slower updates, more flexible pin options):
// pin 7 - Serial clock out (SCLK)
// pin 6 - Serial data out (DIN)
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
//Adafruit_PCD8544 display = Adafruit_PCD8544(7, 6, 5, 4, 3);

// A0 A1 A2 A3 A4 A5
// Hardware SPI (faster, but must use certain hardware pins):
// SCK is LCD serial clock (SCLK) - this is pin 13 on Arduino Uno
// MOSI is LCD DIN - this is pin 11 on an Arduino Uno
// pin 5 - Data/Command select (D/C)
// pin 4 - LCD chip select (CS)
// pin 3 - LCD reset (RST)
 //Adafruit_PCD8544 display = Adafruit_PCD8544(6, 5, 4);
 Adafruit_PCD8544 display = Adafruit_PCD8544(A3, A2, A1, A4, A5);
// Note with hardware SPI MISO and SS pins aren't used but will still be read
// and written to during SPI transfer.  Be careful sharing these pins!

#define NOTE_B0  31
#define NOTE_C1  33
#define NOTE_CS1 35
#define NOTE_D1  37
#define NOTE_DS1 39
#define NOTE_E1  41
#define NOTE_F1  44
#define NOTE_FS1 46
#define NOTE_G1  49
#define NOTE_GS1 52
#define NOTE_A1  55
#define NOTE_AS1 58
#define NOTE_B1  62
#define NOTE_C2  65
#define NOTE_CS2 69
#define NOTE_D2  73
#define NOTE_DS2 78
#define NOTE_E2  82
#define NOTE_F2  87
#define NOTE_FS2 93
#define NOTE_G2  98
#define NOTE_GS2 104
#define NOTE_A2  110
#define NOTE_AS2 117
#define NOTE_B2  123
#define NOTE_C3  131
#define NOTE_CS3 139
#define NOTE_D3  147
#define NOTE_DS3 156
#define NOTE_E3  165
#define NOTE_F3  175
#define NOTE_FS3 185
#define NOTE_G3  196
#define NOTE_GS3 208
#define NOTE_A3  220
#define NOTE_AS3 233
#define NOTE_B3  247
#define NOTE_C4  262
#define NOTE_CS4 277
#define NOTE_D4  294
#define NOTE_DS4 311
#define NOTE_E4  330
#define NOTE_F4  349
#define NOTE_FS4 370
#define NOTE_G4  392
#define NOTE_GS4 415
#define NOTE_A4  440
#define NOTE_AS4 466
#define NOTE_B4  494
#define NOTE_C5  523
#define NOTE_CS5 554
#define NOTE_D5  587
#define NOTE_DS5 622
#define NOTE_E5  659
#define NOTE_F5  698
#define NOTE_FS5 740
#define NOTE_G5  784
#define NOTE_GS5 831
#define NOTE_A5  880
#define NOTE_AS5 932
#define NOTE_B5  988
#define NOTE_C6  1047
#define NOTE_CS6 1109
#define NOTE_D6  1175
#define NOTE_DS6 1245
#define NOTE_E6  1319
#define NOTE_F6  1397
#define NOTE_FS6 1480
#define NOTE_G6  1568
#define NOTE_GS6 1661
#define NOTE_A6  1760
#define NOTE_AS6 1865
#define NOTE_B6  1976
#define NOTE_C7  2093
#define NOTE_CS7 2217
#define NOTE_D7  2349
#define NOTE_DS7 2489
#define NOTE_E7  2637
#define NOTE_F7  2794
#define NOTE_FS7 2960
#define NOTE_G7  3136
#define NOTE_GS7 3322
#define NOTE_A7  3520
#define NOTE_AS7 3729
#define NOTE_B7  3951
#define NOTE_C8  4186
#define NOTE_CS8 4435
#define NOTE_D8  4699
#define NOTE_DS8 4978
 

//Mario main theme melody
int melody[] = {
  NOTE_E7, NOTE_E7, 0, NOTE_E7,
  0, NOTE_C7, NOTE_E7, 0,
  NOTE_G7, 0, 0,  0,
  NOTE_G6, 0, 0, 0,
 
  NOTE_C7, 0, 0, NOTE_G6,
  0, 0, NOTE_E6, 0,
  0, NOTE_A6, 0, NOTE_B6,
  0, NOTE_AS6, NOTE_A6, 0,
 
  NOTE_G6, NOTE_E7, NOTE_G7,
  NOTE_A7, 0, NOTE_F7, NOTE_G7,
  0, NOTE_E7, 0, NOTE_C7,
  NOTE_D7, NOTE_B6, 0, 0,
 
  NOTE_C7, 0, 0, NOTE_G6,
  0, 0, NOTE_E6, 0,
  0, NOTE_A6, 0, NOTE_B6,
  0, NOTE_AS6, NOTE_A6, 0,
 
  NOTE_G6, NOTE_E7, NOTE_G7,
  NOTE_A7, 0, NOTE_F7, NOTE_G7,
  0, NOTE_E7, 0, NOTE_C7,
  NOTE_D7, NOTE_B6, 0, 0
};
//Mario main them tempo
int tempo[] = {
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
 
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
 
  9, 9, 9,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
 
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
 
  9, 9, 9,
  12, 12, 12, 12,
  12, 12, 12, 12,
  12, 12, 12, 12,
};
//Underworld melody
int underworld_melody[] = {
  NOTE_C4, NOTE_C5, NOTE_A3, NOTE_A4,
  NOTE_AS3, NOTE_AS4, 0,
  0,
  NOTE_C4, NOTE_C5, NOTE_A3, NOTE_A4,
  NOTE_AS3, NOTE_AS4, 0,
  0,
  NOTE_F3, NOTE_F4, NOTE_D3, NOTE_D4,
  NOTE_DS3, NOTE_DS4, 0,
  0,
  NOTE_F3, NOTE_F4, NOTE_D3, NOTE_D4,
  NOTE_DS3, NOTE_DS4, 0,
  0, NOTE_DS4, NOTE_CS4, NOTE_D4,
  NOTE_CS4, NOTE_DS4,
  NOTE_DS4, NOTE_GS3,
  NOTE_G3, NOTE_CS4,
  NOTE_C4, NOTE_FS4, NOTE_F4, NOTE_E3, NOTE_AS4, NOTE_A4,
  NOTE_GS4, NOTE_DS4, NOTE_B3,
  NOTE_AS3, NOTE_A3, NOTE_GS3,
  0, 0, 0
};
//Underwolrd tempo
int underworld_tempo[] = {
  12, 12, 12, 12,
  12, 12, 6,
  3,
  12, 12, 12, 12,
  12, 12, 6,
  3,
  12, 12, 12, 12,
  12, 12, 6,
  3,
  12, 12, 12, 12,
  12, 12, 6,
  6, 18, 18, 18,
  6, 6,
  6, 6,
  6, 6,
  18, 18, 18, 18, 18, 18,
  10, 10, 10,
  10, 10, 10,
  3, 3, 3
};
 



#define LOGO16_GLCD_HEIGHT 48
#define LOGO16_GLCD_WIDTH  84


#include "sounddata.h"


int speakerPin = 3; // Can be either 3 or 11, two PWM outputs connected to Timer 2
int motorPin=5;
int lcdPin=4;
int pullDownPin=7;

int yelloButton=8; //0
int blueButton=9; //1
int greenButton=11; //2
int motorButton=10;
uint8_t score_count=0;


volatile uint16_t sample;
byte lastSample;

const static uint8_t PROGMEM eyes[] = {
 0x00,0x00,0x07,0xfc,0x00,0x00,0x01,0xff,0x00,0x00,0x0f
,0x00,0x00,0x3f,0xff,0x00,0x00,0x0f,0xff,0xe0,0x00,0x0f
,0x00,0x00,0xff,0xff,0xc0,0x00,0x3f,0xff,0xf8,0x00,0x0f
,0x00,0x03,0xff,0xff,0xe0,0x00,0x7f,0xff,0xfc,0x00,0x0f
,0x00,0x0f,0xf8,0x07,0xf0,0x00,0xfe,0x01,0xff,0x00,0x0f
,0x00,0x0f,0xc0,0x01,0xf8,0x00,0xf8,0x00,0x3f,0x80,0x0f
,0x00,0x3f,0x80,0x00,0x7c,0x01,0xe0,0x00,0x0f,0xc0,0x0f
,0x00,0x3e,0x00,0x00,0x3c,0x03,0xc0,0x00,0x07,0xc0,0x0f
,0x00,0x7c,0x00,0x00,0x1c,0x03,0x80,0x00,0x01,0xf0,0x0f
,0x00,0xf8,0x00,0x00,0x1e,0x07,0x80,0x00,0x01,0xf0,0x0f
,0x01,0xf0,0x00,0x00,0x0e,0x07,0x80,0x00,0x00,0xf8,0x0f
,0x03,0xe0,0x00,0x00,0x0e,0x07,0x00,0x00,0x00,0x7c,0x0f
,0x03,0xc0,0x00,0x00,0x07,0x06,0x00,0x00,0x00,0x3c,0x0f
,0x07,0x80,0x07,0xe0,0x07,0x0e,0x00,0x7e,0x00,0x1e,0x0f
,0x0f,0x80,0x1f,0xf0,0x07,0x0e,0x00,0x7f,0x80,0x0f,0x0f
,0x0f,0x00,0x1f,0xf8,0x07,0x0e,0x01,0xff,0x80,0x0f,0x0f
,0x0e,0x00,0x3f,0xf8,0x07,0x0e,0x01,0xff,0xc0,0x07,0x0f
,0x1c,0x00,0x7f,0xdc,0x07,0x0e,0x01,0x9f,0xe0,0x03,0x8f
,0x1c,0x00,0x7f,0x8c,0x07,0x0e,0x03,0x0f,0xe0,0x03,0xcf
,0x3c,0x00,0x7f,0x06,0x07,0x0e,0x02,0x0f,0xe0,0x03,0xcf
,0x38,0x00,0x7f,0x06,0x07,0x0e,0x07,0x0f,0xf0,0x01,0xcf
,0x38,0x00,0xff,0x0e,0x07,0x0e,0x07,0x07,0xf0,0x00,0xef
,0x70,0x00,0xff,0x4e,0x07,0x0e,0x07,0x27,0xf0,0x00,0xef
,0x70,0x00,0xff,0x5f,0x07,0x06,0x07,0xb7,0xf0,0x00,0xef
,0x70,0x00,0xff,0xff,0x06,0x07,0x07,0xff,0xf0,0x00,0xef
,0x70,0x00,0xff,0xfe,0x0e,0x07,0x07,0xff,0xf0,0x00,0xef
,0x70,0x00,0xff,0xfe,0x0e,0x07,0x07,0xff,0xf0,0x00,0xef
,0x70,0x00,0x7f,0xfe,0x0e,0x07,0x87,0xff,0xf0,0x00,0xef
,0x70,0x00,0x7e,0x7e,0x1e,0x03,0x87,0xf7,0xe0,0x00,0xef
,0x70,0x00,0x7c,0x7e,0x3c,0x03,0xc3,0xe3,0xe0,0x00,0xef
,0x70,0x00,0x7c,0x7c,0x3c,0x01,0xc3,0xe3,0xe0,0x00,0xef
,0x70,0x00,0x7c,0x78,0x78,0x01,0xe1,0xf3,0xe0,0x00,0xef
,0x70,0x00,0x3f,0xf8,0x78,0x01,0xf1,0xff,0xc0,0x00,0xef
,0x70,0x00,0x1f,0xf8,0xf0,0x00,0xf0,0xff,0x80,0x00,0xef
,0x70,0x00,0x0f,0xe1,0xe0,0x00,0x78,0x7f,0x80,0x00,0xef
,0x78,0x00,0x07,0xc3,0xe0,0x00,0x7c,0x3e,0x00,0x01,0xef
,0x38,0x00,0x00,0x03,0xc0,0x00,0x3e,0x00,0x00,0x01,0xef
,0x3c,0x00,0x00,0x0f,0x80,0x00,0x1f,0x00,0x00,0x03,0xcf
,0x1c,0x00,0x00,0x1f,0x80,0x00,0x0f,0x80,0x00,0x03,0x8f
,0x1f,0x00,0x00,0x7e,0x00,0x00,0x07,0xe0,0x00,0x0f,0x8f
,0x0f,0x00,0x00,0x7e,0x00,0x00,0x07,0xe0,0x00,0x0f,0x8f
,0x07,0xc0,0x01,0xfc,0x00,0x00,0x01,0xf8,0x00,0x1f,0x0f
,0x07,0xf0,0x0f,0xf8,0x00,0x00,0x01,0xff,0x00,0x7e,0x0f
,0x03,0xff,0xff,0xe0,0x00,0x00,0x00,0x7f,0xff,0xfc,0x0f
,0x01,0xff,0xff,0xc0,0x00,0x00,0x00,0x3f,0xff,0xf8,0x0f
,0x00,0x7f,0xff,0x00,0x00,0x00,0x00,0x07,0xff,0xe0,0x0f
,0x00,0x0f,0xf8,0x00,0x00,0x00,0x00,0x01,0xff,0x80,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xef
,0x40,0x00,0x1f,0xff,0x00,0x00,0x03,0xff,0xe0,0x00,0x6f
,0xc0,0x00,0x3f,0xff,0x00,0x00,0x03,0xff,0xf0,0x00,0x6f
,0xc0,0x00,0x1f,0xff,0x00,0x00,0x03,0xff,0xf0,0x00,0x6f
,0xc0,0x00,0x0f,0xfc,0x00,0x00,0x00,0xff,0xc0,0x00,0x6f
,0x40,0x00,0x01,0xe0,0x00,0x00,0x00,0x1e,0x00,0x00,0x6f
,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6f
,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x6f
,0x60,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xcf
,0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xcf
,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x8f
,0x18,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x8f
,0x0e,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x0f,0x0f
,0x07,0x00,0x00,0x00,0x01,0xf0,0x00,0x00,0x00,0x1c,0x0f
,0x03,0xc0,0x00,0x00,0x03,0xbc,0x00,0x00,0x00,0x3c,0x0f
,0x01,0xf8,0x00,0x00,0x1e,0x0f,0x00,0x00,0x03,0xf0,0x0f
,0x00,0xfe,0x00,0x00,0x7c,0x07,0xc0,0x00,0x0f,0xe0,0x0f
,0x00,0x3f,0xff,0xff,0xf0,0x01,0xff,0xff,0xff,0x80,0x0f
,0x00,0x0f,0xff,0xff,0xe0,0x00,0xff,0xff,0xff,0x00,0x0f
,0x00,0x01,0xff,0xff,0x00,0x00,0x0f,0xff,0xf0,0x00,0x0f
,0x00,0x00,0x7f,0xf8,0x00,0x00,0x03,0xff,0xc0,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x03,0xff,0xc0,0x00,0x00,0x00,0x7f,0xf0,0x00,0x0f
,0x00,0x0f,0xff,0xe0,0x00,0x00,0x01,0xff,0xfc,0x00,0x0f
,0x00,0x1f,0xc3,0xf8,0x00,0x00,0x07,0xf8,0x7f,0x00,0x0f
,0x00,0x7c,0x00,0x1e,0x00,0x00,0x0f,0x00,0x07,0xc0,0x0f
,0x00,0xf0,0x00,0x0f,0x00,0x00,0x3e,0x00,0x01,0xe0,0x0f
,0x01,0xc0,0x00,0x07,0x80,0x00,0x78,0x00,0x00,0xf0,0x0f
,0x03,0x80,0x00,0x01,0xc0,0x00,0x70,0x00,0x00,0x78,0x0f
,0x07,0x00,0x00,0x00,0xe0,0x00,0xe0,0x00,0x00,0x3c,0x0f
,0x0f,0x00,0x00,0x00,0x70,0x01,0xc0,0x00,0x00,0x0e,0x0f
,0x1c,0x00,0x00,0x00,0x30,0x03,0x80,0x00,0x00,0x0e,0x0f
,0x1c,0x00,0x00,0x00,0x38,0x03,0x00,0x00,0x00,0x07,0x0f
,0x38,0x00,0x00,0x00,0x1c,0x07,0x00,0x00,0x00,0x07,0x8f
,0x38,0x00,0x00,0x00,0x0c,0x0f,0x00,0x00,0x00,0x03,0x8f
,0x38,0x00,0x00,0x00,0x0c,0x0e,0x00,0x00,0x00,0x03,0x8f
,0x70,0x00,0x00,0x00,0x0e,0x0c,0x00,0x00,0x00,0x01,0xcf
,0x60,0x00,0x00,0x00,0x0e,0x0c,0x00,0x00,0x00,0x01,0xcf
,0x60,0x00,0x00,0x00,0x07,0x1c,0x00,0x00,0x00,0x01,0xcf
,0xe0,0x00,0x00,0x00,0x07,0x18,0x00,0x00,0x00,0x00,0xcf
,0xe0,0x00,0x00,0x00,0x07,0x18,0x00,0x00,0x00,0x00,0xcf
,0xf0,0x00,0x00,0x00,0x03,0x18,0x00,0x00,0x00,0x01,0xcf
,0xf8,0x00,0x00,0x00,0x03,0x18,0x00,0x00,0x00,0x03,0xef
,0xf8,0x00,0x00,0x00,0x03,0x18,0x00,0x00,0x00,0x07,0xef
,0xdc,0x00,0x00,0x00,0x03,0x18,0x00,0x00,0x00,0x0e,0x6f
,0xce,0x00,0x00,0x00,0x03,0x18,0x00,0x00,0x00,0x1e,0xef
,0xc7,0x80,0x00,0x00,0x03,0x18,0x00,0x00,0x00,0x3c,0xef
,0xc3,0xc0,0x00,0x00,0x03,0x18,0x00,0x00,0x00,0x78,0xef
,0xc1,0xe0,0x00,0x00,0x03,0x18,0x00,0x00,0x01,0xe0,0xcf
,0xc0,0x3c,0x00,0x00,0x07,0x18,0x00,0x00,0x0f,0xc0,0xcf
,0x60,0x1f,0x00,0x00,0x07,0x18,0x00,0x00,0x3f,0x00,0xcf
,0x60,0x0f,0xe0,0x00,0x07,0x1c,0x00,0x00,0xfc,0x00,0xcf
,0x70,0x01,0xff,0xc0,0x0e,0x0c,0x00,0xff,0xe0,0x01,0xcf
,0x30,0x00,0x3f,0xff,0xfe,0x0f,0xff,0xff,0x80,0x01,0xcf
,0x38,0x00,0x0f,0xff,0xfc,0x0f,0xff,0xfe,0x00,0x03,0x8f
,0x38,0x00,0x1f,0xff,0x0c,0x0f,0x1f,0xff,0x00,0x03,0x8f
,0x1c,0x00,0x1f,0xff,0x1c,0x07,0x3f,0xff,0x00,0x07,0x0f
,0x1c,0x00,0x1f,0xff,0x38,0x03,0x1f,0xff,0x00,0x06,0x0f
,0x0c,0x00,0x1f,0xfe,0x30,0x03,0x9f,0xfe,0x00,0x0e,0x0f
,0x0f,0x00,0x0f,0xfe,0x70,0x01,0xcf,0xfe,0x00,0x1c,0x0f
,0x03,0x80,0x07,0xfc,0xe0,0x00,0xe7,0xf8,0x00,0x3c,0x0f
,0x03,0xc0,0x01,0xf1,0xc0,0x00,0x73,0xf0,0x00,0x78,0x0f
,0x01,0xe0,0x00,0x07,0x80,0x00,0x38,0x00,0x00,0xe0,0x0f
,0x00,0xf0,0x00,0x0f,0x00,0x00,0x1e,0x00,0x03,0xc0,0x0f
,0x00,0x7c,0x00,0x1c,0x00,0x00,0x0f,0x80,0x07,0x80,0x0f
,0x00,0x1f,0xff,0xf0,0x00,0x00,0x03,0xff,0xfe,0x00,0x0f
,0x00,0x07,0xff,0xe0,0x00,0x00,0x01,0xff,0xfc,0x00,0x0f
,0x00,0x00,0xff,0x80,0x00,0x00,0x00,0x3f,0xf0,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xfe,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xc0,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x01,0xff,0xff,0xf8,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x0f,0xc0,0x00,0x3f,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x1f,0x00,0x00,0x07,0xc0,0x0f
,0x00,0x0f,0xf8,0x00,0x00,0x3c,0x00,0x00,0x03,0xe0,0x0f
,0x00,0x3f,0xfe,0x00,0x00,0x70,0x00,0x00,0x00,0xf0,0x0f
,0x00,0xfe,0x7f,0x80,0x00,0xe0,0x00,0x00,0x00,0x78,0x0f
,0x01,0xf0,0x07,0xc0,0x03,0x80,0x00,0x00,0x00,0x3c,0x0f
,0x03,0xc0,0x01,0xe0,0x07,0x80,0x00,0x00,0x00,0x1c,0x0f
,0x07,0x00,0x00,0x70,0x07,0x00,0x00,0x00,0x00,0x0e,0x0f
,0x1e,0x00,0x00,0x38,0x0e,0x00,0x00,0x00,0x00,0x07,0x0f
,0x1c,0x00,0x00,0x1c,0x0e,0x00,0x00,0x00,0x00,0x03,0x8f
,0x38,0x00,0x00,0x1c,0x1c,0x00,0x00,0x00,0x00,0x03,0x8f
,0x38,0x00,0x00,0x0e,0x1c,0x00,0x00,0x00,0x00,0x01,0xcf
,0x38,0x00,0x00,0x0e,0x18,0x00,0x00,0x00,0x00,0x01,0xcf
,0x30,0x06,0x00,0x0e,0x38,0x03,0x00,0x00,0x00,0x00,0xcf
,0x30,0x0f,0x00,0x06,0x30,0x1f,0xf0,0x00,0x00,0x00,0xef
,0x30,0x1f,0x80,0x06,0x30,0x3f,0xf8,0x00,0x00,0x00,0xef
,0x30,0x1f,0x80,0x0e,0x70,0x7f,0xfc,0x00,0x00,0x00,0xef
,0x38,0x0f,0x00,0x0e,0x70,0x7f,0xfc,0x00,0x00,0x00,0xef
,0x38,0x04,0x00,0x0e,0x70,0xff,0xfe,0x00,0x00,0x00,0x6f
,0x38,0x00,0x00,0x0c,0x70,0xff,0xfe,0x00,0x00,0x00,0x6f
,0x1c,0x00,0x00,0x1c,0x70,0xff,0xfe,0x00,0x00,0x00,0x6f
,0x1c,0x00,0x00,0x1c,0x70,0xff,0xfe,0x00,0x00,0x00,0x6f
,0x0e,0x00,0x00,0x30,0x70,0x7f,0xfc,0x00,0x00,0x00,0xef
,0x0f,0x00,0x00,0xf0,0x30,0x7f,0xfc,0x00,0x00,0x00,0xef
,0x03,0xc0,0x03,0xe0,0x30,0x3f,0xf8,0x00,0x00,0x00,0xef
,0x01,0xf8,0x1f,0x80,0x38,0x1f,0xf0,0x00,0x00,0x00,0xcf
,0x00,0x7f,0xff,0x00,0x18,0x07,0xc0,0x00,0x00,0x01,0xcf
,0x00,0x1f,0xfc,0x00,0x1c,0x00,0x00,0x00,0x00,0x01,0xcf
,0x00,0x00,0x80,0x00,0x1c,0x00,0x00,0x00,0x00,0x03,0x8f
,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x00,0x03,0x8f
,0x00,0x00,0x00,0x00,0x0e,0x00,0x00,0x00,0x00,0x07,0x0f
,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x07,0x0f
,0x00,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x0e,0x0f
,0x00,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x3c,0x0f
,0x00,0x00,0x00,0x00,0x01,0xc0,0x00,0x00,0x00,0x78,0x0f
,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x00,0xf0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0x00,0x01,0xe0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x1e,0x00,0x00,0x07,0xc0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x0f,0x80,0x00,0x1f,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x03,0xf0,0x00,0xfe,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xe0,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xfe,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xf0,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xff,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0x80,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7f,0xff,0xc0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xff,0xe0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0x9f,0xe0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x07,0xfc,0x03,0xf0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xf0,0x00,0xf8,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x1f,0xc0,0x00,0x3c,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0x80,0x00,0x3c,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x7e,0x00,0x00,0x1e,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0xfc,0x00,0x00,0x1e,0x0f
,0x00,0xf8,0x00,0x00,0x00,0x01,0xf8,0x00,0x00,0x0f,0x0f
,0x03,0xfc,0x00,0x00,0x00,0x03,0xf0,0x00,0x00,0x07,0x0f
,0x07,0xff,0x00,0x00,0x00,0x03,0xe0,0x00,0x00,0x07,0x0f
,0x0f,0x9f,0x80,0x00,0x00,0x07,0xc0,0x00,0x00,0x03,0x8f
,0x0e,0x03,0xc0,0x00,0x00,0x1f,0x80,0x00,0x00,0x03,0x8f
,0x08,0x01,0xe0,0x00,0x00,0x1e,0x00,0x00,0x00,0x01,0x8f
,0x18,0x00,0xe0,0x00,0x00,0x3c,0x00,0x00,0x00,0x01,0x8f
,0x1f,0x00,0x70,0x00,0x00,0x7e,0x00,0x00,0x00,0x00,0xcf
,0x3f,0x80,0x38,0x00,0x00,0xff,0xc0,0x00,0x00,0x00,0xcf
,0x3f,0xc0,0x1c,0x00,0x01,0xff,0xc0,0x00,0x00,0x00,0xcf
,0x3f,0xc0,0x0e,0x00,0x01,0xff,0xe0,0x00,0x00,0x00,0x6f
,0x3f,0xc0,0x03,0x00,0x01,0xff,0xe0,0x00,0x00,0x00,0x6f
,0x7f,0xe0,0x03,0x00,0x03,0xff,0xf0,0x00,0x00,0x00,0x6f
,0x7f,0xe0,0x01,0x80,0x03,0xff,0xf0,0x00,0x00,0x00,0x6f
,0x7f,0xe0,0x00,0xc0,0x07,0xff,0xf0,0x00,0x00,0x00,0x6f
,0x7f,0xc0,0x00,0xc0,0x06,0x7f,0xf0,0x00,0x00,0x00,0x6f
,0x7f,0xc0,0x00,0x40,0x06,0x7f,0xf0,0x00,0x00,0x00,0x6f
,0x5f,0xc0,0x00,0x60,0x06,0x7f,0xe0,0x00,0x00,0x00,0x6f
,0x6f,0x80,0x00,0x60,0x07,0x3f,0xe0,0x00,0x00,0x00,0xcf
,0x27,0x00,0x00,0x40,0x03,0x1f,0xc0,0x00,0x00,0x00,0xcf
,0x20,0x00,0x00,0x40,0x03,0x0f,0x80,0x00,0x00,0x01,0xcf
,0x10,0x00,0x00,0x00,0x03,0x80,0x00,0x00,0x00,0x01,0x8f
,0x10,0x00,0x00,0x80,0x01,0x80,0x00,0x00,0x00,0x03,0x8f
,0x08,0x00,0x01,0x80,0x01,0xc0,0x00,0x00,0x00,0x03,0x0f
,0x0e,0x00,0x03,0x00,0x00,0xe0,0x00,0x00,0x00,0x0f,0x0f
,0x07,0x00,0x07,0x00,0x00,0x70,0x00,0x00,0x00,0x1e,0x0f
,0x03,0xc0,0x0e,0x00,0x00,0x78,0x00,0x00,0x00,0x3c,0x0f
,0x00,0x7f,0xf0,0x00,0x00,0x1c,0x00,0x00,0x00,0x78,0x0f
,0x00,0x0f,0xc0,0x00,0x00,0x0e,0x00,0x00,0x00,0xf0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x07,0x80,0x00,0x03,0xc0,0x0f
,0x00,0x00,0x00,0x00,0x00,0x03,0xf8,0x00,0x1f,0x80,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0x83,0xfe,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xf8,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xfc,0x00,0x00,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,
0x00,0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x01,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x01,0xff,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x03,0xff,0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x1f,0xff,0xe0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x7f,0xff,0xf0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0xff,0xff,0xfc,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f
,0x7f,0xff,0xff,0x00,0x00,0x00,0x00,0x03,0xe0,0x00,0x0f
,0x3f,0xff,0xff,0x80,0x00,0x00,0x00,0x07,0xf8,0x00,0x0f
,0x0f,0xff,0xff,0xe0,0x00,0x00,0x00,0x1f,0xfc,0x00,0x0f
,0x07,0xff,0xff,0xf0,0x00,0x00,0x00,0x7f,0xfe,0x00,0x0f
,0x03,0xff,0xff,0xfc,0x00,0x00,0x01,0xff,0xff,0xc0,0x0f
,0x00,0xff,0xff,0xff,0x00,0x00,0x07,0xff,0xff,0xe0,0x0f
,0x00,0x7f,0xff,0xff,0xc0,0x00,0x1f,0xff,0xff,0xe0,0x0f
,0x00,0x1f,0xff,0xff,0xe0,0x00,0x7f,0xff,0xff,0xc0,0x0f
,0x00,0x0f,0xff,0xff,0xf8,0x00,0xff,0xff,0xff,0xc0,0x0f
,0x00,0x03,0xff,0xff,0xfe,0x07,0xff,0xff,0xff,0xf0,0x0f
,0x00,0x01,0xff,0xff,0xff,0x8f,0xff,0xff,0xff,0xf8,0x0f
,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,0x0f
,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,0x0f
,0x00,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x0f
,0x00,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0x0f
,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xff,0xfe,0x00,0x0f
,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xff,0xf8,0x00,0x0f
,0x00,0x00,0x00,0x3f,0xff,0xff,0xff,0xff,0xe0,0x00,0x0f
,0x00,0x00,0x00,0x1f,0xff,0xff,0xff,0xff,0x80,0x00,0x0f
,0x00,0x00,0x00,0x7f,0xff,0xff,0xff,0xfe,0x00,0x00,0x0f
,0x00,0x00,0x01,0xff,0xff,0xff,0xff,0xf8,0x00,0x00,0x0f
,0x00,0x00,0x07,0xff,0xff,0xff,0xff,0xf8,0x00,0x00,0x0f
,0x00,0x00,0x1f,0xff,0xff,0xff,0xff,0xfe,0x00,0x00,0x0f
,0x00,0x00,0xff,0xff,0xff,0xff,0xff,0xff,0x80,0x00,0x0f
,0x00,0x03,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,0x00,0x0f
,0x00,0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,0x00,0x0f
,0x00,0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,0x00,0x0f
,0x01,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x00,0x0f
,0x07,0xff,0xff,0xff,0xff,0xcf,0xff,0xff,0xff,0xc0,0x0f
,0x07,0xff,0xff,0xff,0xfe,0x03,0xff,0xff,0xff,0xf8,0x0f
,0x07,0xff,0xff,0xff,0xf0,0x00,0xff,0xff,0xff,0xfe,0x0f
,0x00,0x7f,0xff,0xff,0x80,0x00,0x3f,0xff,0xff,0xff,0x0f
,0x00,0x3f,0xff,0xfc,0x00,0x00,0x1f,0xff,0xff,0xff,0xef
,0x00,0xff,0xff,0xe0,0x00,0x00,0x07,0xff,0xff,0xff,0xff
,0x00,0xff,0xff,0x00,0x00,0x00,0x01,0xff,0xff,0xff,0xff
,0x00,0x3f,0xf0,0x00,0x00,0x00,0x00,0xff,0xff,0xff,0xcf
,0x00,0x0f,0x00,0x00,0x00,0x00,0x00,0x3f,0xff,0xfe,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x0f,0xff,0xff,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0xff,0xfe,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xff,0xf8,0x0f
,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x30,0x20,0x0f


  
};


int song = 0;

void buttonsOut(){

   if ((digitalRead(yelloButton) || digitalRead(blueButton) || digitalRead(greenButton))==0)
    return;
   
   digitalWrite(motorPin,1); 
   while (digitalRead(motorButton)==0)
    delay(1);
   digitalWrite(motorPin,0); 
   
  
}


int buttonpress (){
  if (digitalRead(yelloButton) || digitalRead(blueButton) || digitalRead(greenButton)){
      return 1;
  }
   else
      return 0;
  
}

 
void sing(int s) {
  // iterate over the notes of the melody:
  song = s;
  if (song == 2) {
  
    int size = sizeof(underworld_melody) / sizeof(int);
    for (int thisNote = 0; thisNote < size; thisNote++) {
 
      // to calculate the note duration, take one second
      // divided by the note type.
      //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
      int noteDuration = 1000 / underworld_tempo[thisNote];
 
      tone(speakerPin, underworld_melody[thisNote], noteDuration);
 
      // to distinguish the notes, set a minimum time between them.
      // the note's duration + 30% seems to work well:
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
 
      //stop the tone playing:
      //tone(speakerPin, 0, noteDuration);

      if (buttonpress())
         return;
 
    }
 
  } else {
 
   
    int size = sizeof(melody) / sizeof(int);
    for (int thisNote = 0; thisNote < size; thisNote++) {
 
      // to calculate the note duration, take one second
      // divided by the note type.
      //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
      int noteDuration = 1000 / tempo[thisNote];
 
      tone(speakerPin, melody[thisNote]/8, noteDuration);
 
      // to distinguish the notes, set a minimum time between them.
      // the note's duration + 30% seems to work well:
      int pauseBetweenNotes = noteDuration * 1.30;
      delay(pauseBetweenNotes);
 
      // stop the tone playing:
      //tone(speakerPin, 0, noteDuration);

      if (buttonpress())
         return;
 
    }
  }
}
 

int selector(){
  int incomingByte;
  unsigned long start_time=millis();
  while (1){
          if (digitalRead(yelloButton)==1){
            incomingByte=0;
            break;
          }
          if (digitalRead(blueButton)==1){
            incomingByte=1;
            break;
          }

          if (digitalRead(greenButton)==1){
            incomingByte=2;
            break;
          }
          if ((millis()-start_time)>60000){
            sing(2);
            start_time=millis();
          }
          delay(10);      
       }
  return incomingByte;
  }


void stopPlayback()
{
    // Disable playback per-sample interrupt.
    TIMSK1 &= ~_BV(OCIE1A);

    // Disable the per-sample timer completely.
    TCCR1B &= ~_BV(CS10);

    // Disable the PWM timer.
    TCCR2B &= ~_BV(CS10);

    digitalWrite(speakerPin, 0);
}

// This is called at 8000 Hz to load the next sample.
ISR(TIMER1_COMPA_vect) {
    if (sample >= sounddata_length) {
        if (sample == sounddata_length + lastSample) {
            stopPlayback();
        }
        else {
            if(speakerPin==11){
                // Ramp down to zero to reduce the click at the end of playback.
                OCR2A = sounddata_length + lastSample - sample;
            } else {
                OCR2B = sounddata_length + lastSample - sample;                
            }
        }
    }
    else {
        if(speakerPin==11){
            OCR2A = pgm_read_byte(&sounddata_data[sample]);
        } else {
            OCR2B = pgm_read_byte(&sounddata_data[sample]);            
        }
    }

    ++sample;
}

void startPlayback()
{
    

    // Set up Timer 2 to do pulse width modulation on the speaker
    // pin.

    // Use internal clock (datasheet p.160)
    ASSR &= ~(_BV(EXCLK) | _BV(AS2));

    // Set fast PWM mode  (p.157)
    TCCR2A |= _BV(WGM21) | _BV(WGM20);
    TCCR2B &= ~_BV(WGM22);

    if(speakerPin==11){
        // Do non-inverting PWM on pin OC2A (p.155)
        // On the Arduino this is pin 11.
        TCCR2A = (TCCR2A | _BV(COM2A1)) & ~_BV(COM2A0);
        TCCR2A &= ~(_BV(COM2B1) | _BV(COM2B0));
        // No prescaler (p.158)
        TCCR2B = (TCCR2B & ~(_BV(CS12) | _BV(CS11))) | _BV(CS10);

        // Set initial pulse width to the first sample.
        OCR2A = pgm_read_byte(&sounddata_data[0]);
    } else {
        // Do non-inverting PWM on pin OC2B (p.155)
        // On the Arduino this is pin 3.
        TCCR2A = (TCCR2A | _BV(COM2B1)) & ~_BV(COM2B0);
        TCCR2A &= ~(_BV(COM2A1) | _BV(COM2A0));
        // No prescaler (p.158)
        TCCR2B = (TCCR2B & ~(_BV(CS12) | _BV(CS11))) | _BV(CS10);

        // Set initial pulse width to the first sample.
        OCR2B = pgm_read_byte(&sounddata_data[0]);
    }





    // Set up Timer 1 to send a sample every interrupt.

    cli();

    // Set CTC mode (Clear Timer on Compare Match) (p.133)
    // Have to set OCR1A *after*, otherwise it gets reset to 0!
    TCCR1B = (TCCR1B & ~_BV(WGM13)) | _BV(WGM12);
    TCCR1A = TCCR1A & ~(_BV(WGM11) | _BV(WGM10));

    // No prescaler (p.134)
    TCCR1B = (TCCR1B & ~(_BV(CS12) | _BV(CS11))) | _BV(CS10);

    // Set the compare register (OCR1A).
    // OCR1A is a 16-bit register, so we have to do this with
    // interrupts disabled to be safe.
    OCR1A = F_CPU / SAMPLE_RATE;    // 16e6 / 8000 = 2000

    // Enable interrupt when TCNT1 == OCR1A (p.136)
    TIMSK1 |= _BV(OCIE1A);

    lastSample = pgm_read_byte(&sounddata_data[sounddata_length-1]);
    sample = 0;
    sei();
}


gametype show_game_menu(){
 display.setTextSize(2);
   display.clearDisplay(); 
   display.setCursor(39,0);
   display.print("+");

  
   display.setCursor(0,32);
   display.print("-");
    
        display.setCursor(71,32);
   
   display.print("x");
   display.display();

   
               
       int incomingByte = selector();
    Serial.print("Choice: ");
    Serial.println(incomingByte);
     
       gametype selected_gametype;
       if (incomingByte==0)
        selected_gametype=ADD;
        else if (incomingByte==1)
           selected_gametype=SUB;
        else
           selected_gametype=MUL;


        return selected_gametype;
}


player show_player_menu(){
 display.setTextSize(1);
   display.clearDisplay(); 
   display.setCursor(9,0);
   display.print("P1 + P2");

  
   display.setCursor(0,40);
   display.print("P1");
    
        display.setCursor(55,40);
   
   display.print("P2");
   display.display();

   
               
       int incomingByte = selector();
    Serial.print("Choice: ");
    Serial.println(incomingByte);
     
       player selected_player;
       if (incomingByte==0)
        selected_player=BOTH;
       else if (incomingByte==1)
           selected_player=P1;
       else
           selected_player=P2;


        return selected_player;
}

void show_level(int level){
   display.setTextSize(2);
   display.clearDisplay(); 
   display.setCursor(16,10);
   display.print("LEVEL");
   display.setCursor(30,32);
   
   display.print(String(level));
   display.display();

  
}

void setup()   {
//  uint8_t set_level=5;
//  for (int ii=0;ii<10;ii++)
//    EEPROM.write(ii, set_level);

  pinMode(yelloButton,INPUT); //0
  pinMode(blueButton,INPUT); //1
  pinMode(greenButton,INPUT); //2
  pinMode(motorButton,INPUT); 
    
  pinMode(lcdPin,OUTPUT);
  digitalWrite(lcdPin,1);

  pinMode(speakerPin,OUTPUT);
  digitalWrite(speakerPin,LOW);
    pinMode(motorPin,OUTPUT);
  digitalWrite(motorPin,0);
  pinMode(pullDownPin,OUTPUT);
  digitalWrite(pullDownPin,HIGH);
  
  
  buttonsOut();

  
  Serial.begin(9600);
  sounddata_length = sizeof(sounddata_data);

  display.begin();
  // init done

  // you can change the contrast around to adapt the display
  // for the best viewing!
  display.setContrast(55);



  display.setRotation(2);

 
    buttonsOut();
    this_player=show_player_menu();
    buttonsOut();
    display.clearDisplay();
    display.drawBitmap(0, 0,  &eyes[random(5)*528], 84, 48, BLACK);
    display.display();

    sing(1);
    buttonsOut();
    this_gametype=show_game_menu();
    delay(200);
    buttonsOut();
    
    

 }
 


void loop() {

   randomSeed(analogRead(A7));
   uint8_t numberspace;
   uint8_t eeprom_shift;
   if (this_player==BOTH)
      eeprom_shift=0;
   else if (this_player==P1)
      eeprom_shift=3;
   else if (this_player==P2)
      eeprom_shift=6;
    
   if (this_gametype==ADD)
    EEPROM.get(0+eeprom_shift, numberspace);
    
   else if (this_gametype==MUL)
    EEPROM.get(1+eeprom_shift, numberspace); 
   else
    EEPROM.get(2+eeprom_shift, numberspace);  
   
   int first_number;
   int second_number;

   int result;
   String symbol;
   if (this_gametype==SUB){
    first_number=  random(numberspace+1);
    second_number= random(first_number+1);
    result=first_number-second_number; 
    symbol = " - ";
   }
   if (this_gametype==ADD){
    first_number=  random(numberspace+1);
    second_number= random(numberspace+1);
    result=first_number+second_number; 
    symbol = " + ";
   }
   if (this_gametype==MUL){
    first_number=  random(numberspace)+1;
    second_number= random(numberspace)+1;
    result=first_number*second_number; 
    symbol = " x ";
   }

    display.clearDisplay();
    display.setTextSize(2);
    display.setTextColor(BLACK);
    String question = String(first_number) + symbol + String(second_number);
    display.setCursor((84-question.length()*12)/2,16);
    display.print(question);

   int answers[3];
   for (int i=0;i<3;i++)
    answers[i] = result;
   
   
   while (answers[1]==answers[0]) 
     answers[1]=random(numberspace+1);

   while (answers[2] == answers[0]){   
      
      answers[2]=random(numberspace+1);
      
   }

   int position [3];
   position[0]=random(3);
   for (int i=1;i<3;i++)
     position[i]=position[0];
    
   while (position[0]==position[1])
     position[1]=random(3);
   position[2]=3- position[1]- position[0];

  

   for (int i=0;i<3;i++){
      if (position[i]==0)
        display.setCursor(38,0);
      if (position[i]==1)
        display.setCursor(0,40);
      if (position[i]==2)
        display.setCursor(70,40);
    display.setTextSize(1);
    display.print(answers[i]);

    }
   
 
  
    

       display.display();

       long int timeout = micros();
       int incomingByte=selector();
       display.clearDisplay();
       
     
       if (incomingByte == position[0]){
          score_count++;
          int image = random(5);
          display.drawBitmap(0, 0,  &eyes[image*528], 84, 48, BLACK);
          display.display();
          
          startPlayback();
          delay(3000);
       }
       else{
          score_count=0;
          for (int i=0;i<2;i++){
            
            display.drawBitmap(0, 0,  &eyes[5*528], 84, 48, BLACK);
            display.display();
           
            bool highlow=0;
            
            for (int j=0;j<100;j++){
              highlow = !highlow;
              if (highlow)
                digitalWrite(speakerPin,1);
              else
                digitalWrite(speakerPin,0);
              delay(7);  
            }

            
            if (i < 1){
              display.clearDisplay();
              display.display();
              delay(300);
            }
            
            
            
          }
          digitalWrite(speakerPin,1);
          delay(1000);
        
       }
       //show_level(numberspace);
      if (score_count>=5){

        if (this_gametype==ADD)
          EEPROM.write(0+eeprom_shift, numberspace+1);
        else if (this_gametype==MUL)
          EEPROM.write(1+eeprom_shift, numberspace+1); 
         else
          EEPROM.write(2+eeprom_shift, numberspace+1);  
   
          score_count=0;
          show_level(numberspace+1);
          delay(2000);
        
        }
       
      bool highlow=0;
      for (int k=1;k<10;k++){
       for (int j=0;j<100;j++){
              highlow = !highlow;
              if (highlow)
                digitalWrite(speakerPin,1);
              else
                digitalWrite(speakerPin,0);
               delayMicroseconds(2000/k);  
            }
      }
           
       buttonsOut();
       

       
  
//
//    if (this_gametype==MUL)
//      this_gametype=ADD;
//    else if (this_gametype==ADD)
//      this_gametype=SUB;
//    else if (this_gametype==SUB)
//      this_gametype=MUL;
   
   
//   display.clearDisplay();
//
//  int image_no = random(7);
//  int image_delay = random(4000);
//
//  
//  display.drawBitmap(0, 0,  &eyes[image_no*528], 84, 48, BLACK);
//  display.display();
//  delay(image_delay);
//  startPlayback();
  
}



